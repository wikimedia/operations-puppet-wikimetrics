#!/bin/bash
#
# This file is managed by puppet
#

usage()
{
cat << EOF
usage: $0 -o <hourly-dir> -d <db-name> -m <db-defaults-file> -r <redis-db-file> -f <public-files>

Backs up the mysql database, redis database file, and wikimetrics public reports
as last.hourly.snapshot.tar.gz into <hourly-dir>.
Overwrites any previous backup at the destination (specified with -o)

If the script encounters symlinks, behaviour is undefined.

REQUIRED
    -o <hourly-dir>        output hourly backups to this directory
    -d <db-name>           mysql database name to back up
    -m <db-defaults-file>  file containing mysql defaults to connect to <db-name>
    -r <redis-db-file>     redis database file path to back up
    -f <public-reports>    directory of wikimetrics public reports to back up

OPTIONS
   -h   Show this message
EOF
}

HOURLY_DESTINATION=
DB_NAME=
REDIS_DB_FILE=
PUBLIC_REPORTS=
REDIS_CLI="/usr/bin/redis-cli"

while getopts "ho:d:m:r:f:" OPTION
do
     case "$OPTION" in
         h)
             usage
             exit
             ;;
         o)
             HOURLY_DESTINATION="$OPTARG"
             ;;
         d)
             DB_NAME="$OPTARG"
             ;;
         m)
             DB_DEFAULTS_FILE="$OPTARG"
             ;;
         r)
             REDIS_DB_FILE="$OPTARG"
             ;;
         f)
             PUBLIC_REPORTS="$OPTARG"
             ;;
         *)
             usage
             exit 1
             ;;
     esac
done

error() {
     echo "Error:" "$@" >&2
     exit 1
}

TIMESTAMP="$(date --utc +"%Y-%m-%dT%H:%M:%SZ")"

if [[ -z "$HOURLY_DESTINATION" ]]
then
    error "You did not give a hourly-dir parameter, although it's required"
fi

if [[ -z "$PUBLIC_REPORTS" ]]
then
    error "You did not give a public-reports parameter, although it's required"
fi

if [[ ! -d "$HOURLY_DESTINATION" ]]
then
    error "'$HOURLY_DESTINATION' does not exist or is not a directory"
fi

if [[ ! -d "$PUBLIC_REPORTS" ]]
then
    error "'$PUBLIC_REPORTS' does not exist or is not a directory"
fi

if [[ -z "$DB_NAME" ]]
then
    error "Missing the name of the database to back up"
fi

if [[ ! -f "$DB_DEFAULTS_FILE" ]]
then
    error "'$DB_DEFAULTS_FILE' does not exist or is not a file"
fi


# Prints a file's mtime to stdout, (or 0 if the file does not exist)
#
# Parameters:
#   $1 - filename to get the mtime for
echo_mtime() {
    local FILE="$1"
    if [ -e "$FILE" ]
    then
        stat --format='%Y' "$FILE"
    else
        echo 0
    fi
}

# If redis is running, saves the current redis state and waits up to
# 15 seconds to for its completion.
redis_force_db_dump() {
    if [ "$(ps -C redis-server h | wc -l)" -ge 1 ]
    then
        # Redis is running, so lets attempt to save redis' state
        #
        # We record the rdb file's mtime, then start the background save, and
        # finally wait until the timestamp of the last save updates.  (We check
        # the files mtime instead of using redis' LASTSAVE command to test
        # closer at the file that we're backing up.)

        local OLD_LAST_SAVE_TIMESTAMP="$(echo_mtime "$REDIS_DB_FILE")"

        # Start the real background save
        # (We have to use background, as foreground save blocks redis
        # during the save)
        "$REDIS_CLI" BGSAVE | grep -v '^Background saving started$'

        local WAIT_COUNTER=15
        local LAST_SAVE_TIMESTAMP="$OLD_LAST_SAVE_TIMESTAMP"

        while [ "$WAIT_COUNTER" -gt 0 \
            -a "$LAST_SAVE_TIMESTAMP" = "$OLD_LAST_SAVE_TIMESTAMP" ]
        do
            sleep 1

            LAST_SAVE_TIMESTAMP="$(echo_mtime "$REDIS_DB_FILE")"

            WAIT_COUNTER=$((WAIT_COUNTER-1))
        done

        if [ "$LAST_SAVE_TIMESTAMP" = "$OLD_LAST_SAVE_TIMESTAMP" ]
        then
            # We only log and do not abort if redis did not (yet) rewrite the
            # rdb, as it means that redis is not finishing in time or is
            # misconfigured, but it need not necessarily mean that the backup
            # will run into problems.

            echo "Warning: Redis dump did not update the timestamp of the rdb file" >&2
        fi
    fi
}

# Since we saw races between the below's tar and redis writing to the rdb, we
# try to enforce a save now. This does not make races go away, but it makes them
# less likely to occur. And it seems making them less likely is the best we can
# meaningfully do at this point, as making them impossible requires redis
# re-configuration in run-time, which causes more problems than they would solve
# here.
redis_force_db_dump

if [[ ! -s "$REDIS_DB_FILE" ]]
then
    error "$REDIS_DB_FILE is empty or not a valid file path"
fi

BACKUP_DB="$(mktemp --tmpdir "database.sql.XXXXXX")"

if [[ ! -f "$BACKUP_DB" ]]
then
    error "Could not create temorary file for database dump"
else
    trap "rm -f \"$BACKUP_DB\"; exit" INT TERM EXIT
fi

# mysqldump with default parameters, just plain non-incremental full backup
mysqldump --defaults-extra-file="$DB_DEFAULTS_FILE" "$DB_NAME" > "$BACKUP_DB"
EXITCODE=$?

# the db is the one thing we cannot live without
if [ $EXITCODE -ne 0 ] ; then
     error "mysqldump failed with exit code $EXITCODE"
fi

if [[ ! -s "$BACKUP_DB" ]]
then
    error "Mysql backup file is empty or not writtable, not proceeding with backup"
fi

# We backup to a candidate tarball, and if everything works out, we replace the
# last "good" tarball by our candidate.
#
# So in case of races when tar-ing up, we have the candidate which is up-to-date
# but might be missing a few files due to the race, and we have a known good
# (maybe not totally up-to-date) variant.

HOURLY_FILE_PREFIX="$HOURLY_DESTINATION/snapshot."
HOURLY_FILE_POSTFIX_GOOD=".tar.gz"
HOURLY_FILE_POSTFIX_CANDIDATE="$HOURLY_FILE_POSTFIX_GOOD.candidate"

HOURLY_FILE_CURRENT_GOOD="${HOURLY_FILE_PREFIX}${TIMESTAMP}${HOURLY_FILE_POSTFIX_GOOD}"
HOURLY_FILE_CURRENT_CANDIDATE="${HOURLY_FILE_PREFIX}${TIMESTAMP}${HOURLY_FILE_POSTFIX_CANDIDATE}"

# Removing all previous candidate files
rm -f "$HOURLY_FILE_PREFIX"*"$HOURLY_FILE_POSTFIX_CANDIDATE"

# Removing all good files but the last good file
ls -1 --sort=time "$HOURLY_FILE_PREFIX"*"$HOURLY_FILE_POSTFIX_GOOD" 2>/dev/null \
    | tail -n +2 \
    | xargs rm -f

HOURLY_FILE_OLD_GOOD="$(echo "${HOURLY_FILE_PREFIX}"*"${HOURLY_FILE_POSTFIX_GOOD}")"

# Updating mtime on last good file
#
# This updating marks the file to belong to the current run. Hence, it does not
# get removed early.
if [ -e "$HOURLY_FILE_OLD_GOOD" ]
then
    touch "$HOURLY_FILE_OLD_GOOD"
fi

LANGUAGE=C flock --timeout 10 "$HOURLY_DESTINATION" --command "\
tar fcz \"$HOURLY_FILE_CURRENT_CANDIDATE\" \"$BACKUP_DB\" \
\"$REDIS_DB_FILE\" \"$PUBLIC_REPORTS\" \
&& mv -f \"$HOURLY_FILE_CURRENT_CANDIDATE\" \"$HOURLY_FILE_CURRENT_GOOD\" \
&& rm -f \"$HOURLY_FILE_OLD_GOOD\" \
" 2> >( grep -v '^tar: Removing leading `/'\'' from member names$' >&2 )
EXITCODE=$?

if [ $EXITCODE -ne 0 ] ; then
    error "Either failed to get lock on $HOURLY_DESTINATION, or tar-ing failed."
fi
